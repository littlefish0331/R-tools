cate <- fread("../dict/category.txt", encoding = "UTF-8", header = F)
tmp01 <- readLines(con = allfile[10], encoding = "UTF-8")
allfile[10]
tmp01 <- readLines(con = allfile[1], encoding = "UTF-8")
tmp01
tmp01 <- readLines(con = allfile[1], encoding = "UTF-8")
delTF <- T
tmp <- tmp01 %>% head(10)
for (lang_i in 1:length(lang)) {
idx_meta <- tmp %>% grep(pattern = lang$V1[lang_i], x = .) %>% sum
if (idx_meta!=0) {
metadata <- tmp01[1:idx_meta]
textdata <- tmp01[-(1:idx_meta)]
language <- lang$V2[lang_i]
break
}
}
source("../code/rm.utf8bom.R", encoding = "UTF-8")
metadata <- rm.utf8bom(mydata = metadata)
for (cate_i in 1:nrow(cate)) {
TF <- metadata %>% grepl(pattern = cate$V1[cate_i], x = .) %>% sum
if (TF) {
category <- cate$V2[cate_i]
break
}
}
metadata
update_datetime <- metadata[2] %>%
gsub(".* ([0-9/]+) ([0-9:]+)", "\\1T\\2", .) %>%
gsub("(/|:)", "", .)
update_datetime
filename <- paste(category, language, update_datetime, sep = "-")
filename_pattern <- paste(category, language, sep = "-")
filename_full <- paste0("../data_format/", filename, ".csv")
filename
filename_pattern
filename_full
tmp01 <- textdata %>% grepl("^(上|下)午", .)
tmp02 <- ifelse(tmp01==TRUE, 1, 0) %>% cumsum()
tmp03 <- data.table(textdata = textdata, splitdata = tmp02)
tmp04 <- tmp03[, .(textdata_combine = paste0(textdata, collapse = "\n")), by = .(splitdata)]
tmp05 <- tmp04$textdata_combine %>% gsub(".*\t(.*)", "\\1", .)
tmp06 <- tmp05 %>%
sapply(., zen2han, USE.NAMES = F) %>%
gsub("^ 按需求分配", "(D) 按需求分配", .) %>%
gsub("^\\(四\\)", "(D) ", .) %>%
gsub("^\"\\((A|B|C|D)\\)", "(\\1) ", .) %>% #清理 '"(D)'
gsub("^\"(A|B|C|D)\\.", "(\\1) ", .) %>% #清理 '"D.'
gsub("^\\(\\((A|B|C|D)\\) \\)", "(\\1) ", .) %>% #清理 '"((D) )'
gsub("(A|B|C|D)\\.", "(\\1) ", .) %>% #清理 'D.'
gsub("^\\((A|B|C|D)\\)", "(\\1) ", .) %>% #正規化 '"(D) "'
gsub(" +", " ", .) %>% #清理多個空格為一個
gsub("\"$", "", .) %>%  #清理句尾 '"'
gsub("^\"", "", .) %>%  #清理句首 '"'
trimws(x = ., which = "both") %>%
gsub("\n *\n", "\n", .) %>%
gsub("( |\n)+$", "", .) %>%
gsub("\"", "'", .) #這個很重要，是為了後續的 remove duplicate，不然文件讀取進來都會是 ""XXX""
idx_optionD <- seq(from = 5, to = length(tmp06), by = 5)
tmp06[idx_optionD] %>% substring(text = ., first = 1, last = 4) %>% table %>% View()
idx_optionD <- seq(from = 5, to = length(tmp06), by = 5)
checknum <- tmp06[idx_optionD] %>% substring(text = ., 1, 4) %>% table %>% as.numeric() %>% .[1]
if (checknum!=(length(tmp06)/5)){
print("有內鬼! 終止交易")
delTF <- FALSE
}
source("../code/judge.lang.R", encoding = "UTF-8")
if (delTF) {
tmp07 <- tmp06 %>% matrix(data = ., ncol = 5, byrow = T) %>% data.table()
colnames(tmp07) <- c("question", "optionA", "optionB", "optionC", "optionD")
tmp07[, `:=`(language = language,
category = category,
language2 = judge.lang(mydata = tmp07$question))]
}
tmp <- list.files(path = "../data_format/", pattern = filename_pattern, full.names = T)
tmp
filename_pattern
if (length(tmp)!=0) {
data_last <- fread(tmp, encoding = "UTF-8")
res <- list(data_last, tmp07) %>% rbindlist() %>% unique()
} else {
res <- tmp07 %>% unique()
}
fwrite(x = res, file = filename_full, row.names = F)
tmp <- list.files(path = "../data_format/", pattern = filename_pattern, full.names = T)
if (length(tmp)!=0) {
data_last <- fread(tmp, encoding = "UTF-8")
res <- list(data_last, tmp07) %>% rbindlist() %>% unique()
} else {
res <- tmp07 %>% unique()
}
tmp <- list.files(path = "../data_format/", pattern = filename_pattern, full.names = T)
if (length(tmp)!=0) {
data_last <- fread(tmp, encoding = "UTF-8")
res <- list(data_last, tmp07) %>% rbindlist() %>% unique()
} else {
res <- tmp07 %>% unique()
}
data_last <- fread(tmp, encoding = "UTF-8")
tmp
tmp
tmp <- list.files(path = "../data_format/", pattern = filename_pattern, full.names = T)
if (length(tmp)!=0) {
data_last <- fread(tmp, encoding = "UTF-8")
res <- list(data_last, tmp07) %>% rbindlist() %>% unique()
} else {
res <- tmp07 %>% unique()
}
fwrite(x = res, file = filename_full, row.names = F)
metadata[1]
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
tmp01 <- fread(file_path, encoding = "UTF-8")
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
tmp01 <- fread(file_path, encoding = "UTF-8")
View(tmp01)
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
num <- 10
tmp01 <- fread(file_path, encoding = "UTF-8")
sample(1:nrow(tmp01), size = num, replace = F)
idx <- sample(1:nrow(tmp01), size = num, replace = F)
tmp01[idx, ]
tmp01[idx, ] %>% transpose() %>% unlist()
tmp02 <- tmp01[idx, ] %>% transpose() %>% unlist(., use.names = F)
tmp02 %>% head
View(tmp01)
#
tmp01[idx, ] %>% View()
blank_num <- 8
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = num, replace = F)
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, ] %>% transpose() %>% unlist(., use.names = F)
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
idx_quiz
idx_blank <- (1:(quiz_num-1))*(1+4+blank_num)
idx_blank
6:(1+4+blank_num)
0:(quiz_num-2)
t2 <- (0:(quiz_num-2))*(1+4+blank_num)
t2
idx_blank <- rep(t2, each = blank_num)*(6:(1+4+blank_num))
idx_quiz
idx_blank
rep(t2, each = blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
idx_quiz
idx_blank
max(idx_quiz)
result <- rep(NA, max(idx_quiz))
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, ] %>% transpose() %>% unlist(., use.names = F)
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-2))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
result <- rep(NA, max(idx_quiz))
result[idx_quiz] <- tmp02
idx_quiz
tmp02
idx_quiz <- rep(t1, each = 5)+(1:5)
idx_quiz
tmp02 <- tmp01[idx, 1:4, with = F] %>% transpose() %>% unlist(., use.names = F)
tmp02
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:4, with = F] %>% transpose() %>% unlist(., use.names = F)
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-2))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
result <- rep(NA, max(idx_quiz))
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
tmp02
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-2))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
result <- rep(NA, max(idx_quiz))
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
result %>% View()
result %>% head(100) %>% cat
result %>% head(100)
result %>% head(100) %>% print()
result %>% head(100) %>% cat()
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
# --------------------------------------------------------
# File Target
# - 將整理好格式的試題，做成題目與解題空間的形式。
# - file_path: 整理好格式的試題
# - quiz_num: 題目數。
# - blank_num: 解題空間行數。
# - output_path: 輸出位置
# --------------------------------------------------------
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
output_path <- ""
# ---
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
# --------------------------------------------------------
# File Target
# - 將整理好格式的試題，做成題目與解題空間的形式。
# - file_path: 整理好格式的試題
# - quiz_num: 題目數。
# - blank_num: 解題空間行數。
# - output_path: 輸出位置
# --------------------------------------------------------
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
output_path <- ""
# ---
# Read data
# transfer to vector
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
# ---
# create idx for quiz
# create idx for blank
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-2))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
# ---
# insert data in result
# output
result <- NA
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
# ---
# insert data in result
# output
result <- NA
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
# ---
# insert data in result
# output
result <- NULL
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
#
result %>% View()
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
# --------------------------------------------------------
# File Target
# - 將整理好格式的試題，做成題目與解題空間的形式。
# - file_path: 整理好格式的試題
# - quiz_num: 題目數。
# - blank_num: 解題空間行數。
# - output_path: 輸出位置
# --------------------------------------------------------
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
output_path <- ""
# ---
# Read data
# transfer to vector
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
# ---
# create idx for quiz
# create idx for blank
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
# ---
# insert data in result
# output
result <- NULL
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
#
result %>% View()
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
# --------------------------------------------------------
# File Target
# - 將整理好格式的試題，做成題目與解題空間的形式。
# - file_path: 整理好格式的試題
# - quiz_num: 題目數。
# - blank_num: 解題空間行數。
# - output_path: 輸出位置
# --------------------------------------------------------
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
output_path <- ""
# ---
# Read data
# transfer to vector
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
# ---
# create idx for quiz
# create idx for blank
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
# ---
# insert data in result
# output
result[idx_quiz] <- tmp02
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
# --------------------------------------------------------
# File Target
# - 將整理好格式的試題，做成題目與解題空間的形式。
# - file_path: 整理好格式的試題
# - quiz_num: 題目數。
# - blank_num: 解題空間行數。
# - output_path: 輸出位置
# --------------------------------------------------------
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
output_path <- "./output.csv"
# ---
# Read data
# transfer to vector
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
# ---
# create idx for quiz
# create idx for blank
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
# ---
# insert data in result
# output
result <- NULL
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
write.table(result, file = output_path, fileEncoding = "UTF-8")
#
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
# --------------------------------------------------------
# File Target
# - 將整理好格式的試題，做成題目與解題空間的形式。
# - file_path: 整理好格式的試題
# - quiz_num: 題目數。
# - blank_num: 解題空間行數。
# - output_path: 輸出位置
# --------------------------------------------------------
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
output_path <- "./output.txt"
# ---
# Read data
# transfer to vector
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
# ---
# create idx for quiz
# create idx for blank
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
# ---
# insert data in result
# output
result <- NULL
result[idx_quiz] <- tmp02
result[idx_blank] <- ""
write.table(result, file = output_path, fileEncoding = "UTF-8")
write(x = result, file = output_path)
writeLines(text = result, con = output_path)
writeLines(text = result, con = output_path, useBytes = T)
writeLines(text = result, con = output_path)
writeLines(text = result, con = output_path, useBytes = T)
csv2txt <- function(file_path, quiz_num, blank_num, output_path){
# ---
# Read data
# transfer to vector
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
# ---
# create idx for quiz
# create idx for blank
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
# ---
# insert data in result
# output
res <- NULL
res[idx_quiz] <- tmp02
res[idx_blank] <- ""
return(res)
}
rm(list = ls())
invisible(gc())
library(dplyr)
library(data.table)
# --------------------------------------------------------
# File Target
# - 將整理好格式的試題，做成題目與解題空間的形式。
# - file_path: 整理好格式的試題
# - quiz_num: 題目數。
# - blank_num: 解題空間行數。
# - output_path: 輸出位置
# --------------------------------------------------------
file_path <- "./data_format/SAA-cht-20201105T0559.csv"
quiz_num <- 10
blank_num <- 8
output_path <- "./output.txt"
csv2txt <- function(file_path, quiz_num, blank_num, output_path){
# ---
# Read data
# transfer to vector
tmp01 <- fread(file_path, encoding = "UTF-8")
idx <- sample(1:nrow(tmp01), size = quiz_num, replace = F)
tmp02 <- tmp01[idx, 1:5, with = F] %>% transpose() %>% unlist(., use.names = F)
# ---
# create idx for quiz
# create idx for blank
t1 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_quiz <- rep(t1, each = 5)+(1:5)
t2 <- (0:(quiz_num-1))*(1+4+blank_num)
idx_blank <- rep(t2, each = blank_num)+(6:(1+4+blank_num))
# ---
# insert data in result
# output
res <- NULL
res[idx_quiz] <- tmp02
res[idx_blank] <- ""
return(res)
}
result <- csv2txt(file_path = file_path, quiz_num = quiz_num, blank_num = blank_num, output_path = output_path)
result %>% View()
# result %>% View()
writeLines(text = result, con = output_path, useBytes = T)
